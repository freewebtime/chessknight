//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameContext {

    public GameEntity gameRootEntity { get { return GetGroup(GameMatcher.GameRoot).GetSingleEntity(); } }
    public ChessKnight.Unity.GameRootComponent gameRoot { get { return gameRootEntity.gameRoot; } }
    public bool hasGameRoot { get { return gameRootEntity != null; } }

    public GameEntity SetGameRoot(ChessKnight.Unity.GameRootScript newValue) {
        if (hasGameRoot) {
            throw new Entitas.EntitasException("Could not set GameRoot!\n" + this + " already has an entity with ChessKnight.Unity.GameRootComponent!",
                "You should check if the context already has a gameRootEntity before setting it or use context.ReplaceGameRoot().");
        }
        var entity = CreateEntity();
        entity.AddGameRoot(newValue);
        return entity;
    }

    public void ReplaceGameRoot(ChessKnight.Unity.GameRootScript newValue) {
        var entity = gameRootEntity;
        if (entity == null) {
            entity = SetGameRoot(newValue);
        } else {
            entity.ReplaceGameRoot(newValue);
        }
    }

    public void RemoveGameRoot() {
        gameRootEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class GameEntity {

    public ChessKnight.Unity.GameRootComponent gameRoot { get { return (ChessKnight.Unity.GameRootComponent)GetComponent(GameComponentsLookup.GameRoot); } }
    public bool hasGameRoot { get { return HasComponent(GameComponentsLookup.GameRoot); } }

    public void AddGameRoot(ChessKnight.Unity.GameRootScript newValue) {
        var index = GameComponentsLookup.GameRoot;
        var component = CreateComponent<ChessKnight.Unity.GameRootComponent>(index);
        component.Value = newValue;
        AddComponent(index, component);
    }

    public void ReplaceGameRoot(ChessKnight.Unity.GameRootScript newValue) {
        var index = GameComponentsLookup.GameRoot;
        var component = CreateComponent<ChessKnight.Unity.GameRootComponent>(index);
        component.Value = newValue;
        ReplaceComponent(index, component);
    }

    public void RemoveGameRoot() {
        RemoveComponent(GameComponentsLookup.GameRoot);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class GameMatcher {

    static Entitas.IMatcher<GameEntity> _matcherGameRoot;

    public static Entitas.IMatcher<GameEntity> GameRoot {
        get {
            if (_matcherGameRoot == null) {
                var matcher = (Entitas.Matcher<GameEntity>)Entitas.Matcher<GameEntity>.AllOf(GameComponentsLookup.GameRoot);
                matcher.componentNames = GameComponentsLookup.componentNames;
                _matcherGameRoot = matcher;
            }

            return _matcherGameRoot;
        }
    }
}
